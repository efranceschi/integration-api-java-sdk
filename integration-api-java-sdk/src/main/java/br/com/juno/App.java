package br.com.juno;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;

import br.com.juno.integration.api.model.Balance;
import br.com.juno.integration.api.model.Bank;
import br.com.juno.integration.api.model.BusinessArea;
import br.com.juno.integration.api.model.Charge;
import br.com.juno.integration.api.model.CompanyType;
import br.com.juno.integration.api.model.response.Responses;
import br.com.juno.integration.api.services.JunoApiManager;
import br.com.juno.integration.api.services.ChargeService.ChargeCreateBuilder.Charge.PaymentType;
import br.com.juno.integration.api.services.ChargeService.ChargeListBuilder.OrderBy;

public class App {

    public static void main(String[] args) {

        // @formatter:off
        JunoApiManager.config()
                .clientId("iH3Um6mPrlNNT98S")
                .clientSecret("e!LCWcO<EAxq){:EZejRv4XATAt^hU9M")
                .resourceToken("37013DDF21B83FFCA8AA6AF8912A9FBC91E5765DA991873CA407FA8CAFF22BB0");
        // @formatter:on

        // @formatter:off
        List<Charge> charges = JunoApiManager.resources().charges().create()
                .charge()
                    .amount(BigDecimal.valueOf(50D))
                    .description("Example generated by SDK")
                    .dueDate(LocalDate.now().plusDays(5))
                    .installments(3)
                    .references(Arrays.asList("ref1", "ref2", "ref3"))
                    .paymentTypes(new HashSet<>(Arrays.asList(PaymentType.BOLETO, PaymentType.CREDIT_CARD)))
                .billing()
                    .name("Norton")
                    .document("25238016042")
                    .email("norton@juno.com.br")
                    .phone("41999999999")
                .create();

        charges.forEach(System.out::println);
        // @formatter:on

        // @formatter:off
        Responses<Charge> listCharges = JunoApiManager.resources().charges().list()//
                .showArchived(false)
                   .showDue(false)
                   .showPaid(true)
                   .showNotFailed(true)
                   .orderBy(OrderBy.AMOUNT)
                   .pageSize(600)
                .get();

        listCharges.getContent().forEach(r -> System.out.println(r.getContent()));

        while (listCharges.hasNext()) {
            listCharges = JunoApiManager.resources().charges().list().getNextPage(listCharges);
            listCharges.getContent().forEach(r -> System.out.println(r.getContent()));
        }
        // @formatter:on

        Balance balance = JunoApiManager.resources().balance().get();
        System.out.println(balance);

        List<Bank> banks = JunoApiManager.resources().data().getBanks();
        System.out.println(banks);

        List<CompanyType> companyTypes = JunoApiManager.resources().data().getCompanyTypes();
        System.out.println(companyTypes);

        List<BusinessArea> businessArea = JunoApiManager.resources().data().getBusinessAreas();
        System.out.println(businessArea);
    }
}
